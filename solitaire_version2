
import PIL
from random import*
import math
from tkinter import*

#### Fonctions

# creation du mouvement

def appui_gauche (e):
    '''Traitement de l'évènement appui sur le bouton gauche de la souris'''
    
    cnv.x1, cnv.y1 = e.x, e.y
    cnv.selCarte = cnv.find_closest(e.x, e.y)
    print(cnv.selCarte)
    #cnv.itemconfig(cnv.selCarte, width = 3)
    cnv.lift(cnv.selCarte)


def deplacer(e):
    '''Traitement du appuyer-glisser de la souris'''
    
    x2, y2 = e.x, e.y
    dx, dy = x2 - cnv.x1, y2 - cnv.y1
    if cnv.selCarte is not None :
        cnv.move(cnv.selCarte, dx, dy)
        cnv.x1, cnv.y1 = x2, y2
        
    
def relache_gauche (e):
    '''Traitement du lâcher de la souris'''

    cnv.selCarte = None
    
def distribution ():
    '''Modifie les listes l_pioches, l_colonnes pour distribuer les cartes.'''
    
    for k in range (7):
        (x, y) = position_colonne[k]
        for i in range (k):
            valeur_carte = l_pioche.pop()
            l_colonnes[k].append(valeur_carte) #distribue une carte côté non visible dans la colonne
            c = Carte(x, y, valeur_carte)
            y +=20   
        (hauteur, enseigne, visible) = l_pioche.pop()
        l_colonnes[k].append((hauteur, enseigne, True))
        c = Carte( x, y, (hauteur, enseigne, True) )
        
    


#### Création de variables globales

hauteurs = ['ace', '2', '3', '4', '5', '6', '7', '8','9', '10', 'jack', 'queen', 'king']
enseignes = ['clubs', 'spades', 'hearts', 'diamonds']

l_pioche = []       #creation d'une liste vide pioche contenant toutes les cartes du jeu 

for enseigne in enseignes :         
    for i in range (len(hauteurs)):
        l_pioche.append((i+1,enseigne, False))     #on remplie la liste l_pioche avec des triplets (hauteur, enseigne, booléen de la carte est visible ou non)
        
shuffle(l_pioche)
print(l_pioche)


l_tas = [[]for k in range (4)]      #creation d'une liste de liste représentant les espaces "tas" où l'on va ranger les cartes
l_colonnes = [[]for m in range (7)]     #creation d'une liste de liste représentant les espaces "colonnes" où l'on manipule les cartes

hauteur_carte = 96
largeur_carte = 71
position_colonne = [(k*100+36,213) for k in range (1,8)]


#### Interface graphique 

WIDTH=800               #taille de la fenêtre
HEIGHT=400

interface = Tk()
interface.title('Solitaire')

cnv = Canvas(interface, width = WIDTH, height= HEIGHT, background = 'green')
cnv.pack(pady = 0)
cnv.selCarte = None 

#chargement des images des cartes dans un dictionnaire images

images ={} #creation du dictionnaire vide

for enseigne in enseignes :         
    for i in range (len(hauteurs)):
        #on remplie le dictionnaire avec le couple enseigne, hauteur comme clef et l'image comme valeur
        images[(i+1, enseigne)] = PhotoImage(file = "playing_cards/"+hauteurs[i]+"_"+enseigne+".png") 
        
image_dos = PhotoImage(file = "playing_cards/back_card.png")    #on importe l'image de dos à part



cnv.bind ('<B1-Motion>', deplacer)      #mouvement de la souris tenue
cnv.bind("<Button1-ButtonRelease>", relache_gauche)    #relacher la souris
cnv.bind("<Button-1>", appui_gauche)    #appui sur le bouton gauche de la souris
       
       
pioche = cnv.create_rectangle(25,25,96,121)  #creation de l'emplacement pour la pioche

#creation des emplacements pour les quatre tas 
tas_1 = cnv.create_rectangle(400,25,471,121)
tas_2 = cnv.create_rectangle(500,25,571,121)
tas_3 = cnv.create_rectangle(600,25,671,121)
tas_4 = cnv.create_rectangle(700,25,771,121)

#creation des emplacements pour les "suites"
colonne_1 = cnv.create_rectangle(100,165,171,261)
colonne_2 = cnv.create_rectangle(200,165,271,261)
colonne_3 = cnv.create_rectangle(300,165,371,261)
colonne_4 = cnv.create_rectangle(400,165,471,261)
colonne_5 = cnv.create_rectangle(500,165,571,261)
colonne_6 = cnv.create_rectangle(600,165,671,261)
colonne_7 = cnv.create_rectangle(700,165,771,261)





#### Classes objets

class Carte:
    """Représente une carte à jouer standard.
    L'attribut valeur est un couple (enseigne, hauteur) où enseigne 
    est une chaîne et hauteur un entier entre 1 (as) et 13 (roi).
    Les attributs x,y donnent la poition du coin supérieur gauche.
    L'attribut visible est un booléen qui indique si la carte est 
    visible ou retournée."""

    def __init__(self, x, y, valeur):
        self.x = x
        self.y = y
        self.valeur = valeur
        (hauteur, enseigne, visible) = valeur
        if visible :
            self.id = cnv.create_image(x, y, image = images[hauteur, enseigne])
        else :
            self.id = cnv.create_image(x, y, image = image_dos)
        

class Pile :
    """La pioche"""

    def __init__(self):
        self.contenu = []

    def __repr__(self):
        ch="contenu de la pile : "
        for x in self.contenu:
            ch+=str(x)+ ", "
        return ch

    def est_vide (self):
        return self.contenu==[]

    def empiler (self,x):
        self.contenu.append(x)

    def depiler (self):
        assert not (self.contenu is None), 'Liste vide'
        self.contenu.pop()

    def taille(self):
        return len(self.contenu)

    def sommet (self):
        return self.contenu[-1]






#### Appels

my_label = Label(interface, text="")
my_label.pack(pady = 0)

distribution()





interface.mainloop()

'''Sources utilisées pour aide : 
   - Apprendre à programmer avec Python 3, de Gérard Swimmen
   - Tkinter pour ISN, documentation TKinter en ligne,
   '''
