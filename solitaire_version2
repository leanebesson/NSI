
import PIL
from random import*
import math
from tkinter import*
from time import *


#### Fonctions

# creation du mouvement

def appui_gauche (e):
    '''Traitement de l'évènement appui sur le bouton gauche de la souris'''
    
    cnv.x1, cnv.y1 = e.x, e.y   # la position du clic est conservé grâce à cnv.x1 et cnv.y1
    id_appui = cnv.find_closest(e.x, e.y)[0]    #[0] permet de trouver l'element dans le tuple
    if id_appui in carte_id :       # teste si l'identifiant du widget cliqué est bien celui d'une carte 
        carte = carte_id[id_appui]
        (hauteur, enseigne, visible) = carte.valeur
        if not visible :
            groupe = groupe_id(e.x, e.y)
            if groupe == 'pioche':
                cnv.pile_mobile= None
                cnv.origine_pile_mobile = None
                appartenance = carte.appartenance
                if not main.est_vide():   #si la main n'est pas vide, on remet les cartes de la main sous la pioche puis on la remplie
                    
                    for i in range (main.taille()-1, -1, -1):
                        carte_pioche = main.depiler()
                        carte_pioche.retourner()
                        carte_pioche.deplacer(-100-20*i, 0)
                        pioche.contenu.insert(0, carte_pioche)
                        carte_pioche.appartenance = 'pioche'
                        
                        
                elif main.est_vide():         # si la main est vide, on peut la remplir de trois cartes
                    for i in range (3):
                        carte_pioche = pioche.depiler()    #prend une carte dans la pioche
                        carte_pioche.retourner()
                        main.empiler(carte_pioche) #ajoute la carte dans la main
                        carte_pioche.appartenance = 'main'+str(i)


            cnv.pile_mobile = None
            return
        appartenance = carte.appartenance
        if appartenance[:-1] == 'main':
            k = int(appartenance[-1])      #numero de la carte
            cnv.pile_mobile = Pile_cartes(carte.x, carte.y, 0, 0)
            cnv.pile_mobile.empiler(main.contenu.pop())
            cnv.origine_pile_mobile = 'main'+str(k)
            
        if appartenance[:-1] == 'colonne':  #teste si la carte est dans une colonne
            k = int(appartenance[-1])      #numero de la colonne
            pile = colonnes[k]
            position = pile.contenu.index(carte) # indice de la carte dans la colonne
            cnv.pile_mobile = Pile_cartes(carte.x, carte.y, 0, 20)
            cnv.origine_pile_mobile = 'colonne'+str(k)
            while len(pile.contenu) > position :
                cnv.pile_mobile.empiler(pile.contenu.pop(position))
            
    else:
        cnv.pile_mobile= None
        cnv.origine_pile_mobile = None

def deplacer(e):
    '''Traitement du appuyer-glisser de la souris'''
    
    x2, y2 = e.x, e.y   # position de la souris
    dx, dy = x2 - cnv.x1, y2 - cnv.y1
    if cnv.pile_mobile is not None :
        cnv.pile_mobile.deplacer(dx, dy)
        cnv.x1, cnv.y1 = x2, y2
        
    
def relache_gauche (e):
    '''Traitement du lâcher de la souris'''
    
    groupe = groupe_id(e.x, e.y)
    
    if groupe == 'pioche':  #si on clique sur la pioche, il n'y a pas de pile mobile
        return 
        
    if cnv.pile_mobile is None:
        return 
        
        
    orig = cnv.origine_pile_mobile[:-1]  #le groupe origine dont la pile mobile est prélevé
    num_orig = int(cnv.origine_pile_mobile[-1]) # le numéro dans le groupe où la pile mobile est prélévé
    
    if groupe is None:
        if orig == 'colonne':
            colonnes[num_orig].etendre(cnv.pile_mobile)     # remets le contenu de la pile mobile dans sa pile d'origine si on ne la pose nulle part
        elif orig == 'main':
            main.etendre(cnv.pile_mobile)    
        return 
        
    if groupe == 'main':
        if orig == 'main':
            main.etendre(cnv.pile_mobile) 
        return
            
    tenu = cnv.pile_mobile.pied()  #la carte tenue par la souris est la première de la pile_mobile
    (h_tenu, ens_tenu, vis_tenu) = tenu.valeur

    sorte_groupe = groupe[:-1]  # prends la sorte de groupe auquel la pile appartenait 
    dest = int(groupe[-1])      # numero du groupe destination
    
    if sorte_groupe == 'tas' and cnv.pile_mobile.taille() == 1:     #pour poser une carte sur un tas, il faut toujours que ce soit une carte seule
        if tas[dest].est_vide() and h_tenu == 1:    #si le tas est vide et la carte tenu est un as, de n'importe quel enseigne
            tas[dest].empiler(cnv.pile_mobile.contenu.pop())        # on l'empile sur la pile tas
            if orig == 'colonne':
                if not colonnes[num_orig].est_vide() :       #on retourne la dernière carte de la colonne d'origine si elle existe
                    colonnes[num_orig].sommet().retourner()
        
        elif not tas[dest].est_vide() :     #si le tas n'est pas vide
            (h_dest, ens_dest, vis_dest) = tas[dest].sommet().valeur # on décompose la carte du haut du tas
            if ens_dest == ens_tenu and h_tenu-1 == h_dest :    # si l'enseigne de la carte du sommet du tas et celle tenu sont les même et que celle tenu est supérieur à 1 à celle du sommet du tas
                tas[dest].empiler(cnv.pile_mobile.contenu.pop())    #on l'empile sur le tas 
                if not colonnes[num_orig].est_vide() :
                    (hauteur, enseigne, visible) = colonnes[num_orig].sommet().valeur 
                    if not visible :
                        colonnes[num_orig].sommet().retourner()
        else:
            if orig == 'colonne':
                colonnes[num_orig].etendre(cnv.pile_mobile)     # remets le contenu de la pile mobile dans sa pile d'origine si on ne la pose nulle part
            elif orig == 'main':
                main.etendre(cnv.pile_mobile) 
        
                    
    elif sorte_groupe == 'colonne'  :
        if colonnes[dest].est_vide() and h_tenu == 13:
            while not cnv.pile_mobile.est_vide():
                cnv.pile_mobile.contenu[0].appartenance = 'colonne'+str(dest)
                colonnes[dest].empiler(cnv.pile_mobile.contenu.pop(0))
                if orig == 'colonne':
                    if not colonnes[num_orig].est_vide():       #on retourne la dernière carte de la colonne d'origine si elle existe
                        (hauteur, enseigne, visible) = colonnes[num_orig].sommet().valeur 
                        if not visible :
                            colonnes[num_orig].sommet().retourner()
                
        elif not colonnes[dest].est_vide():
            (h_dest, ens_dest, vis_dest) = colonnes[dest].sommet().valeur
            if not vis_dest:
                if orig == 'colonne':
                    colonnes[num_orig].etendre(cnv.pile_mobile)     # remets le contenu de la pile mobile dans sa pile d'origine si on ne la pose nulle part
                elif orig == 'main':
                    main.etendre(cnv.pile_mobile) 
                
            elif ens_tenu in alternance[ens_dest] and h_dest == h_tenu+1 and vis_dest:        #test l'alternance des cartes et si la carte à poser est bien inférieur de 1 à celle de la colonne

                while not cnv.pile_mobile.est_vide():
                    cnv.pile_mobile.contenu[0].appartenance = 'colonne'+str(dest)
                    carte = cnv.pile_mobile.contenu.pop(0)
                    colonnes[dest].empiler(carte)
                    
                    
                if orig == 'colonne':
                    if not colonnes[num_orig].est_vide() :       #on retourne la dernière carte de la colonne d'origine si elle existe
                        (hauteur, enseigne, visible) = colonnes[num_orig].sommet().valeur 
                        if not visible :
                            colonnes[num_orig].sommet().retourner()
                            return 
            else :
                if orig == 'colonne':
                    colonnes[num_orig].etendre(cnv.pile_mobile)     # remets le contenu de la pile mobile dans sa pile d'origine si on ne la pose nulle part
                elif orig == 'main':
                    main.etendre(cnv.pile_mobile) 
        
    else :
        if orig == 'colonne':
            colonnes[num_orig].etendre(cnv.pile_mobile)     # remets le contenu de la pile mobile dans sa pile d'origine si on ne la pose nulle part
        elif orig == 'main':
            main.etendre(cnv.pile_mobile)    # remets le contenu de la pile mobile dans sa pile d'origine si on ne la pose nulle part
        

    cnv.pile_mobile = None
    
def groupe_id(x, y):
    '''Renvoie une chaine qui indique quel groupe est présent à la position x, y du canevas c'est-à-dire celle de la souris. Les groupes possibles sont un des quatre tas, une des sept colonnes, la pioche ou la main.'''
    
    for k in range (4):
        if 400+100*k <= x <= 471+100*k and 25 <= y <= 121 :
            return 'tas'+ str(k)
            
    for k in range (7) :
        col = colonnes[k]
        if col.est_vide() :
            if 100+100*k <= x <= 171+100*k and 165 <= y <= 261 :
                return 'colonne'+ str(k)
        else :
            carte = col.sommet()
            if carte.x <= x <= carte.x + largeur_carte and carte.y <= y <=carte.y + hauteur_carte :
                return 'colonne' + str(k)
                
    if 25 <= x <= 96 and 25 <= y <= 121 :
        return 'pioche'
        
    if not main.est_vide():
        for k in range (3):
            if 125+20*k <= x <= 196+20*k and 25 <= y <= 121:
                return 'main'
    
    return None
                        
    
def creation_pioche ():
    '''Renvoie une liste d'elements de Pile_cartes qui représente la pioche mélangée'''
    
    l_pioche = []
    
    for enseigne in enseignes :         
        for i in range (len(hauteurs)):
            l_pioche.append((i+1,enseigne, False))     #on remplie la liste l_pioche avec des triplets (hauteur, enseigne, booléen de la carte est visible ou non)
            
    shuffle(l_pioche)
    
    pioche = Pile_cartes(25, 25, 0, 0)
    for valeur in l_pioche :
        c = Carte(25, 25, valeur)
        c.appartenance = 'pioche'
        pioche.empiler(c)
        
    return pioche
    
    
def distribution (pioche):
    '''Renvoie la liste de piles représentant les colonnes de manipulation des cartes.'''
    
    colonnes = []
    tas = [Pile_cartes(400+100*k, 25, 0, 0) for k in range (4)]
    main = Pile_cartes(125, 25, 20, 0)
    for k in range (7):
        (x, y) = (100*k+100, 165)
        col = Pile_cartes( x, y, 0, 20)
        for i in range (k):
            carte = pioche.depiler()    #prend une carte dans la pioche
            col.empiler(carte) #ajoute la carte dans la colonne
            carte.appartenance = 'colonne'+str(k)
        carte = pioche.depiler()
        carte.retourner()
        carte.appartenance = 'colonne'+str(k)
        col.empiler(carte)
        colonnes.append(col)
        
        
    return colonnes, tas, main
    


#### Création de variables globales

hauteurs = ['ace', '2', '3', '4', '5', '6', '7', '8','9', '10', 'jack', 'queen', 'king']
enseignes = ['clubs', 'spades', 'hearts', 'diamonds']

alternance = {'clubs':['diamonds', 'hearts'], 'spades':['diamonds', 'hearts'], 'hearts' : ['clubs', 'spades'], 'diamonds': ['clubs', 'spades']}     #dictionnaire pour l'alternance des enseignes dans les colonnes

hauteur_carte = 96
largeur_carte = 71

#dictionnaire qui donne la carte en fonction de l'identifiant du canevas

carte_id = {}


#### Interface graphique 

WIDTH=800               #taille de la fenêtre
HEIGHT=600

interface = Tk()
interface.title('Solitaire')

cnv = Canvas(interface, width = WIDTH, height= HEIGHT, background = 'green')
cnv.pack(pady = 0)
cnv.selCarte = None 

#chargement des images des cartes dans un dictionnaire images

images ={} #creation du dictionnaire vide

for enseigne in enseignes :         
    for i in range (len(hauteurs)):
        #on remplie le dictionnaire avec le couple enseigne, hauteur comme clef et l'image comme valeur
        images[(i+1, enseigne)] = PhotoImage(file = "playing_cards/"+hauteurs[i]+"_"+enseigne+".png") 
        
image_dos = PhotoImage(file = "playing_cards/back_card.png")    #on importe l'image de dos à part

cnv.bind ('<B1-Motion>', deplacer)      #mouvement de la souris tenue
cnv.bind("<Button1-ButtonRelease>", relache_gauche)    #relacher la souris
cnv.bind("<Button-1>", appui_gauche)    #appui sur le bouton gauche de la souris
       
       
pioche = cnv.create_rectangle(25,25,96,121)  #creation de l'emplacement pour la pioche

#creation des emplacements pour les quatre tas 
tas_1 = cnv.create_rectangle(400,25,471,121)
tas_2 = cnv.create_rectangle(500,25,571,121)
tas_3 = cnv.create_rectangle(600,25,671,121)
tas_4 = cnv.create_rectangle(700,25,771,121)

#creation des emplacements pour les "suites"
colonne_1 = cnv.create_rectangle(100,165,171,261)
colonne_2 = cnv.create_rectangle(200,165,271,261)
colonne_3 = cnv.create_rectangle(300,165,371,261)
colonne_4 = cnv.create_rectangle(400,165,471,261)
colonne_5 = cnv.create_rectangle(500,165,571,261)
colonne_6 = cnv.create_rectangle(600,165,671,261)
colonne_7 = cnv.create_rectangle(700,165,771,261)





#### Classes objets

class Carte:
    """Représente une carte à jouer standard.
    L'attribut valeur est un couple (enseigne, hauteur) où enseigne 
    est une chaîne et hauteur un entier entre 1 (as) et 13 (roi).
    Les attributs x,y donnent la poition du coin supérieur gauche.
    L'attribut visible est un booléen qui indique si la carte est 
    visible ou retournée."""

    def __init__(self, x, y, valeur):
        self.x = x
        self.y = y
        self.valeur = valeur
        self.appartenance = None    # à sa création, la carte n'a pas d'appartenance definie
        #les appartenances possibles sont 'pioche', 'la_main', les 'tas' (0 à 3) et les 'colonnes' (0 à 6)
        (hauteur, enseigne, visible) = valeur
        if visible :
            self.id = cnv.create_image(x, y, anchor = NW, image = images[hauteur, enseigne])    #anchor NW pour que les coordonnées de la carte soient celle du coin supérieur gauche
        else :
            self.id = cnv.create_image(x, y, anchor = NW, image = image_dos)
        carte_id[self.id] = self  #ajout d'une entrée dans le dictionnaire  carte_id
        
    def retourner (self):
        (hauteur, enseigne, visible) = self.valeur
        self.valeur = (hauteur, enseigne, not(visible))
        if visible :
            cnv.itemconfig(self.id, image = image_dos)
        else:
            cnv.itemconfig(self.id, image = images[hauteur, enseigne])
            
    def deplacer (self, dx, dy):
        self.x += dx
        self.y += dy
        cnv.move(self.id, dx, dy)
        
        

class Pile_cartes :
    """Classe pour des piles de cartes; la pioche, les colonnes de manipulation des cartes, ..."""

    def __init__(self,x, y, decale_x, decale_y):  #decale_x, decale_y pour le décalage à l'affichage entre deux cartes
        self.contenu = []
        self.x, self.y = x, y
        self.decale_x, self.decale_y = decale_x, decale_y

    def __repr__(self):
        ch="contenu de la pile : "
        for x in self.contenu:
            ch+=str(x)+ ", "
        return ch

    def est_vide (self):
        return self.contenu==[]

    def empiler (self, c):
        n = self.taille()         #nombre de cartes avant l'ajout
        self.contenu.append(c)
        x1, y1 = c.x, c.y       # coordonnées de la carte
        c.deplacer(self.x -x1 + n*self.decale_x, self.y - y1 + n*self.decale_y) #place la carte sur la pile 
        cnv.lift(c.id)      #place la carte au dessus des autres

    def depiler (self):
        assert  not self.contenu == [], 'Pile vide'
        return self.contenu.pop()

    def taille(self):

        return len(self.contenu)

    def sommet (self):
        assert self.contenu != [], 'Pile vide'
        return self.contenu[-1]
        
    def etendre (self, pile):
        while not cnv.pile_mobile.est_vide():
            self.empiler(pile.contenu.pop(0))
            
        
    def pied (self):
        # renvoie la dernière carte de la pile
        assert self.contenu != [], 'Pile vide'
        return self.contenu[0]


        
    def deplacer (self, dx, dy):
        self.x += dx
        self.y += dy
        for carte in self.contenu :
            carte.deplacer(dx, dy)
        






#### Appels
pioche = creation_pioche()
colonnes, tas, main = distribution(pioche)

if tas[0].taille() == 13:
    if tas[1].taille() == 13:
        if tas[2].taille() == 13:
            if tas[3].taille() == 13:
                print('gagné')
                cnv.create_text(WIDTH/2, HEIGHT/2, 'Vous avez gagné !')
                


interface.mainloop()

'''Sources utilisées pour aide : 
   - Apprendre à programmer avec Python 3, de Gérard Swimmen
   - Tkinter pour ISN, documentation TKinter en ligne,
   '''
