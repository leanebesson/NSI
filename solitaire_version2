
import PIL
from random import*
import math
from tkinter import*
from time import *

#### Fonctions

# creation du mouvement

def appui_gauche (e):
    '''Traitement de l'évènement appui sur le bouton gauche de la souris'''
    
    cnv.x1, cnv.y1 = e.x, e.y
    cnv.selCarte = cnv.find_closest(e.x, e.y)
    print(cnv.selCarte)
    #cnv.itemconfig(cnv.selCarte, width = 3)
    cnv.lift(cnv.selCarte)
    

def deplacer(e):
    '''Traitement du appuyer-glisser de la souris'''
    
    x2, y2 = e.x, e.y
    dx, dy = x2 - cnv.x1, y2 - cnv.y1
    if cnv.selCarte is not None :
        cnv.move(cnv.selCarte, dx, dy)
        cnv.x1, cnv.y1 = x2, y2
        
    
def relache_gauche (e):
    '''Traitement du lâcher de la souris'''

    cnv.selCarte = None
   
def creation_pioche ():
    '''Renvoie une liste d'elements de Pile_cartes qui représente la pioche mélangée'''
    
    l_pioche = []
    
    for enseigne in enseignes :         
        for i in range (len(hauteurs)):
            l_pioche.append((i+1,enseigne, False))     #on remplie la liste l_pioche avec des triplets (hauteur, enseigne, booléen de la carte est visible ou non)
            
    shuffle(l_pioche)
    
    pioche = Pile_cartes(61, 72, 0, 0)
    for valeur in l_pioche :
        c = Carte(61, 72, valeur)
        pioche.empiler(c)
        
    return pioche
    
def distribution (pioche):
    '''Renvoie la liste de piles représentant les colonnes de manipulation des cartes.'''
    
    colonnes = []
    for k in range (7):
        (x, y) = (100*k+136, 213)
        col = Pile_cartes( x, y, 0, 20)
        for i in range (k):
            carte = pioche.depiler()    #prend une carte dans la pioche
            col.empiler(carte) #ajoute la carte dans la colonne
        carte = pioche.depiler()
        carte.retourner()
        col.empiler(carte)
        colonnes.append(col)
        
    return colonnes
    


#### Création de variables globales

hauteurs = ['ace', '2', '3', '4', '5', '6', '7', '8','9', '10', 'jack', 'queen', 'king']
enseignes = ['clubs', 'spades', 'hearts', 'diamonds']

l_tas = [[]for k in range (4)]      #creation d'une liste de liste représentant les espaces "tas" où l'on va ranger les cartes
l_colonnes = [[]for m in range (7)]     #creation d'une liste de liste représentant les espaces "colonnes" où l'on manipule les cartes

hauteur_carte = 96
largeur_carte = 71

#dictionnaire qui donne la carte en fonction de l'identifiant du canevas

carte_id = {}


#### Interface graphique 

WIDTH=800               #taille de la fenêtre
HEIGHT=400

interface = Tk()
interface.title('Solitaire')

cnv = Canvas(interface, width = WIDTH, height= HEIGHT, background = 'green')
cnv.pack(pady = 0)
cnv.selCarte = None 

#chargement des images des cartes dans un dictionnaire images

images ={} #creation du dictionnaire vide

for enseigne in enseignes :         
    for i in range (len(hauteurs)):
        #on remplie le dictionnaire avec le couple enseigne, hauteur comme clef et l'image comme valeur
        images[(i+1, enseigne)] = PhotoImage(file = "playing_cards/"+hauteurs[i]+"_"+enseigne+".png") 
        
image_dos = PhotoImage(file = "playing_cards/back_card.png")    #on importe l'image de dos à part

cnv.bind ('<B1-Motion>', deplacer)      #mouvement de la souris tenue
cnv.bind("<Button1-ButtonRelease>", relache_gauche)    #relacher la souris
cnv.bind("<Button-1>", appui_gauche)    #appui sur le bouton gauche de la souris
       
       
pioche = cnv.create_rectangle(25,25,96,121)  #creation de l'emplacement pour la pioche

#creation des emplacements pour les quatre tas 
tas_1 = cnv.create_rectangle(400,25,471,121)
tas_2 = cnv.create_rectangle(500,25,571,121)
tas_3 = cnv.create_rectangle(600,25,671,121)
tas_4 = cnv.create_rectangle(700,25,771,121)

#creation des emplacements pour les "suites"
colonne_1 = cnv.create_rectangle(100,165,171,261)
colonne_2 = cnv.create_rectangle(200,165,271,261)
colonne_3 = cnv.create_rectangle(300,165,371,261)
colonne_4 = cnv.create_rectangle(400,165,471,261)
colonne_5 = cnv.create_rectangle(500,165,571,261)
colonne_6 = cnv.create_rectangle(600,165,671,261)
colonne_7 = cnv.create_rectangle(700,165,771,261)





#### Classes objets

class Carte:
    """Représente une carte à jouer standard.
    L'attribut valeur est un couple (enseigne, hauteur) où enseigne 
    est une chaîne et hauteur un entier entre 1 (as) et 13 (roi).
    Les attributs x,y donnent la poition du coin supérieur gauche.
    L'attribut visible est un booléen qui indique si la carte est 
    visible ou retournée."""

    def __init__(self, x, y, valeur):
        self.x = x
        self.y = y
        self.valeur = valeur
        (hauteur, enseigne, visible) = valeur
        if visible :
            self.id = cnv.create_image(x, y, image = images[hauteur, enseigne])
        else :
            self.id = cnv.create_image(x, y, image = image_dos)
        carte_id[self.id] = self  #ajout d'une entrée dans le dictionnaire  carte_id
        
    def retourner (self):
        (hauteur, enseigne, visible) = self.valeur
        self.valeur = (hauteur, enseigne, not visible)
        if visible :
            cnv.itemconfig(self.id, image = image_dos)
        else:
            cnv.itemconfig(self.id, image = images[hauteur, enseigne])
            
    def deplacer (self, dx, dy):
        self.x += dx
        self.y += dy
        cnv.move(self.id, dx, dy)
        
        

class Pile_cartes :
    """Classe pour des piles de cartes; la pioche, les colonnes de manipulation des cartes, ..."""

    def __init__(self,x, y, decale_x, decale_y):  #decale_x, decale_y pour le décalage à l'affichage entre deux cartes
        self.contenu = []
        self.x, self.y = x, y
        self.decale_x, self.decale_y = decale_x, decale_y

    def __repr__(self):
        ch="contenu de la pile : "
        for x in self.contenu:
            ch+=str(x)+ ", "
        return ch

    def est_vide (self):
        return self.contenu==[]

    def empiler (self, c):
        n = self.taille()         #nombre de cartes avant l'ajout
        self.contenu.append(c)
        x1, y1 = c.x, c.y       # coordonnées de la carte
        cnv.move(c.id, self.x -x1 + n*self.decale_x, self.y - y1 + n*self.decale_y) #place la carte sur la pile 
        cnv.lift(c.id)      #place la carte au dessus des autres
        print(c.valeur)

    def depiler (self):
        assert not (self.contenu is None), 'Liste vide'
        return self.contenu.pop()

    def taille(self):
        assert not (self.contenu is None), 'Liste vide'
        return len(self.contenu)

    def sommet (self):
        return self.contenu[-1]
        
    def deplacer (self, dx, dy):
        self.x += dx
        self.y += dy
        for carte in self.contenu :
            carte.deplacer(dx, dy)
        






#### Appels
pioche = creation_pioche()
colonnes = distribution(pioche)


interface.mainloop()

'''Sources utilisées pour aide : 
   - Apprendre à programmer avec Python 3, de Gérard Swimmen
   - Tkinter pour ISN, documentation TKinter en ligne,
   '''
