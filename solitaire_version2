
import PIL
from random import*
import math
from tkinter import*

#### interface graphique 

WIDTH=800               #taille de la fenêtre
HEIGHT=400

interface = Tk()
interface.title('Solitaire')

cnv = Canvas(interface, width = WIDTH, height= HEIGHT, background = 'green')
cnv.pack(pady = 0)
cnv.selCarte = None 

#chargement des images des cartes dans un dictionnaire images
hauteurs = ['ace', '2', '3', '4', '5', '6', '7', '8','9', '10', 'jack', 'queen', 'king']
enseignes = ['clubs', 'spades', 'hearts', 'diamonds']

images ={} #creation du dictionnaire vide

for enseigne in enseignes :         
    for i in range (len(hauteurs)):
        #on remplie le dictionnaire avec le couple enseigne, hauteur comme clef et l'image comme valeur
        images[(enseigne,i+1)] = PhotoImage(file = "playing_cards/"+hauteurs[i]+"_"+enseigne+".png")    
print(images)
       
       
pioche = cnv.create_rectangle(25,25,96,121)  #creation de l'emplacement pour la pioche

#creation des emplacements pour les quatre tas 
tas_1 = cnv.create_rectangle(400,25,471,121)
tas_2 = cnv.create_rectangle(500,25,571,121)
tas_3 = cnv.create_rectangle(600,25,671,121)
tas_4 = cnv.create_rectangle(700,25,771,121)

#creation des emplacements pour les "suites"
colonne_1 = cnv.create_rectangle(100,165,171,261)
colonne_2 = cnv.create_rectangle(200,165,271,261)
colonne_3 = cnv.create_rectangle(300,165,371,261)
colonne_4 = cnv.create_rectangle(400,165,471,261)
colonne_5 = cnv.create_rectangle(500,165,571,261)
colonne_6 = cnv.create_rectangle(600,165,671,261)
colonne_7 = cnv.create_rectangle(700,165,771,261)

####

# creation du mouvement

def appui_gauche (e):
    '''Traitement de l'évènement appui sur le bouton gauche de la souris'''
    
    cnv.x1, cnv.y1 = e.x, e.y
    cnv.selCarte = cnv.find_closest(e.x, e.y)
    #cnv.itemconfig(cnv.selCarte, width = 3)
    cnv.lift(cnv.selCarte)


def deplacer(e):
    '''Traitement du appuyer-glisser de la souris'''
    x2, y2 = e.x, e.y
    dx, dy = x2 - cnv.x1, y2 - cnv.y1
    if cnv.selCarte is not None :
        cnv.move(cnv.selCarte, dx, dy)
        cnv.x1, cnv.y1 = x2, y2
        
    
    


def relache_gauche (e):
    print("Le bouton de la souris a été relaché")
    
cnv.bind ('<B1-Motion>', deplacer)      #mouvement de la souris tenue
cnv.bind("<Button1-ButtonRelease>", relache_gauche)    #relacher la souris
cnv.bind("<Button-1>", appui_gauche)    #appui sur le bouton gauche de la souris



#### class objets

class Carte:
    """Représente une carte à jouer standard.
    L'attribut valeur est un couple (enseigne, hauteur) où enseigne 
    est une chaîne et hauteur un entier entre 1 (as) et 13 (roi).
    Les attributs x,y donnent la poition du coin supérieur gauche.
    L'attribut visible est un booléen qui indique si la carte est 
    visible ou retournée."""

    def __init__(self, x, y, valeur, visible = False):
        
        self.x = x
        self.y = y
        self.valeur = valeur
        self.visible = visible
        self.id = cnv.create_image(x, y, image = images[valeur])
        

class Pile :
    """La pioche"""

    def __init__(self):
        self.contenu = []

    def __repr__(self):
        ch="contenu de la pile : "
        for x in self.contenu:
            ch+=str(x)+ ", "
        return ch

    def est_vide (self):
        return self.contenu==[]

    def empiler (self,x):
        self.contenu.append(x)

    def depiler (self):
        assert not (self.contenu is None), 'Liste vide'
        self.contenu.pop()

    def taille(self):
        return len(self.contenu)

    def sommet (self):
        return self.contenu[-1]

#### fonctions

def pioche ():

    pioche = Pile()
    for i in range (26):
        pioche.empiler(Carte(randint(0,3),randint(1,13)))
    return pioche


def Colonne_1 ():
    Colonne1 = Pile()
    Colonne1.empiler(Carte(randint(0,3),randint(1,13)))
    return Colonne1

def Colonne_2 ():
    Colonne2 = Pile()
    for i in range (2):
        Colonne2.empiler(Carte(randint(0,3),randint(1,13)))
    return Colonne2

def Colonne_3 ():
    Colonne3 = Pile()
    for i in range (3):
        Colonne3.empiler(Carte(randint(0,3),randint(1,13)))
    return Colonne3

def Colonne_4 ():
    Colonne4 = Pile()
    for i in range (4):
        Colonne4.empiler(Carte(randint(0,3),randint(1,13)))
    return Colonne4

def Colonne_5 ():
    Colonne5 = Pile()
    for i in range (5):
        Colonne5.empiler(Carte(randint(0,3),randint(1,13)))
    return Colonne5

def Colonne_6 ():
    Colonne6 = Pile()
    for i in range (6):
        Colonne6.empiler(Carte(randint(0,3),randint(1,13)))
    return Colonne6

def Colonne_7 ():
    Colonne7 = Pile()
    for i in range (7):
        Colonne7.empiler(Carte(randint(0,3),randint(1,13)))
    return Colonne7





#### appels

my_label = Label(interface, text="")
my_label.pack(pady = 0)


c = Carte(60, 74, ('spades', 5))
c = Carte(60, 74, ('diamonds', 13))
c = Carte(60, 74, ('clubs', 2))

'''Espace_As_1 = Pile ()
Espace_As_2 = Pile()
Espace_As_3 = Pile()
Espace_As_4 = Pile()'''

interface.mainloop()

'''Sources utilisées pour aide : 
   - Apprendre à programmer avec Python 3, de Gérard Swimmen
   - Tkinter pour ISN, documentation TKinter en ligne,
   '''

